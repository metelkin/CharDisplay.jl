var documenterSearchIndex = {"docs":
[{"location":"api/#API-references","page":"API","title":"API references","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [CharDisplay]\nOrder   = [:type, :function]","category":"page"},{"location":"api/#CharDisplay.DisplayP4","page":"API","title":"CharDisplay.DisplayP4","text":"function DisplayP4(\n    RS::Int,\n    RW::Union{Int,Nothing},\n    E::Int,\n    D7::Int,\n    D6::Int,\n    D5::Int,\n    D4::Int\n)\n\nInitialize object representing character display with parallel bus in 4 bit mode and prepare it for writing characters. Cursor will be set to the first line and first symbol: (0,0) pisition.\n\nArguments\n\nRS-D4 : GPIO numer connected to corresponding pins.   You have not to connect RW pin, RW is allowed to be nothing. \n\n\n\n\n\n","category":"type"},{"location":"api/#CharDisplay.DisplayP8","page":"API","title":"CharDisplay.DisplayP8","text":"function DisplayP8(\n    RS::Int,\n    RW::Union{Int,Nothing},\n    E::Int,\n    D7::Int,\n    D6::Int,\n    D5::Int,\n    D4::Int\n    D3::Int,\n    D2::Int,\n    D1::Int,\n    D0::Int\n)\n\nInitialize object representing character display with parallel bus in 8 bit mode and prepare it for writing characters. Cursor will be set to the first line and first symbol: (0,0) pisition.\n\nArguments\n\nRS-D0 : GPIO numer connected to corresponding pins.   You have not to connect RW pin, RW is allowed to be nothing. \n\n\n\n\n\n","category":"type"},{"location":"api/#Base.write-Tuple{CharDisplay.DisplayP, Char}","page":"API","title":"Base.write","text":"function write(display::DisplayP, symbol::Char)\n\nWrite character to the current position and shift cursor to the next position.\n\nArguments\n\ndisplay : DisplayP object.\nsymbol : character to print. The symbol code must be convertable to UInt8.   Full list of available characters can be found in datasheet for the display.   If some of symbol cannot be converted, \"?\" sign will be printed.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.write-Tuple{CharDisplay.DisplayP, String}","page":"API","title":"Base.write","text":"function write(display::DisplayP, string::String)\n\nWrite character string starting from the current position.\n\nArguments\n\ndisplay : DisplayP object.\nstring : string to print. Each symbol code must be convertable to UInt8.   Full list of available characters can be found in datasheet for the display.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.write-Tuple{CharDisplay.DisplayP, UInt8}","page":"API","title":"Base.write","text":"write(display::DisplayP, byte::UInt8)\n\nWrite data to CG or DDRAM\n\nDB7 DB6 DB5 DB4 DB4 DB3 DB2 DB1 DB0\n\nArguments\n\nbyte : Byte representing symbol.\n\n\n\n\n\n","category":"method"},{"location":"api/#CharDisplay.clear_display-Tuple{CharDisplay.DisplayP}","page":"API","title":"CharDisplay.clear_display","text":"clear_display(display::DisplayP)\n\nClears entire display and sets DDRAM address 0 in address counter.\n\n0 0 0 0 0 0 0 1\n\n\n\n\n\n","category":"method"},{"location":"api/#CharDisplay.cursor_shift-Tuple{CharDisplay.DisplayP}","page":"API","title":"CharDisplay.cursor_shift","text":"cursor_shift(display::DisplayP; right::Bool = false)\n\nMoves cursor without changing DDRAM contents.\n\n0 0 0 1 0 R/L - -\n\n\n\n\n\n","category":"method"},{"location":"api/#CharDisplay.display_on_off_control-Tuple{CharDisplay.DisplayP}","page":"API","title":"CharDisplay.display_on_off_control","text":"display_on_off_control(\n    display::DisplayP;\n    display_on::Bool = true,\n    cursor_on::Bool = true,\n    blinking::Bool = false\n)\n\nSets entire display (D) on/off, cursor on/off (C), and blinking of cursor position character (B).\n\n0 0 0 0 1 D C B\n\nArguments\n\ndisplay_on : true means display on, false is off.\ncursor_on : true means cursor on, false is off.\nblinking : true means blinking cursor character.\n\n\n\n\n\n","category":"method"},{"location":"api/#CharDisplay.display_shift-Tuple{CharDisplay.DisplayP}","page":"API","title":"CharDisplay.display_shift","text":"display_shift(display::DisplayP; right::Bool = false)\n\nShifts display without changing DDRAM contents.\n\n# 0 0 0 1 1 R/L - -\n\n\n\n\n\n","category":"method"},{"location":"api/#CharDisplay.entry_mode_set-Tuple{CharDisplay.DisplayP}","page":"API","title":"CharDisplay.entry_mode_set","text":"entry_mode_set(display::DisplayP; increment::Bool = true, shift::Bool = false)\n\nSets cursor move direction and specifies display shift. These operations are performed during data write and read.\n\n0 0 0 0 0 1 I/D S\n\nArguments\n\nincrement : true means increment, false decrement\nshift : true accompanies display shift\n\n\n\n\n\n","category":"method"},{"location":"api/#CharDisplay.function_set-Tuple{CharDisplay.DisplayP}","page":"API","title":"CharDisplay.function_set","text":"function_set(\n    display::DisplayP;\n    _8bits::Bool = false,\n    _2lines::Bool = true,\n    _10pixels::Bool = false,\n    second_set::Bool = false\n)\n\nSets interface data length (DL), number of display lines (N), and character font (F)\n\n0 0 1 DL N F P â€”\n\nArguments\n\n_8bits : set 8 bit mode (true) or 4 bit model (false)\n_2lines : true means 2 lines, false means one line. \n_10pixels : true for 5x10 pixel symbols modules. Default (false) is 5x8.\nsecond_set : Some modules supports 2 symbols fonts. See the datasheet.\n\n\n\n\n\n","category":"method"},{"location":"api/#CharDisplay.return_home-Tuple{CharDisplay.DisplayP}","page":"API","title":"CharDisplay.return_home","text":"return_home(display::DisplayP)\n\nSets DDRAM address 0 in address counter. Also returns display from being shifted to original position. DDRAM contents remain unchanged.\n\n0 0 0 0 0 0 1 -\n\n\n\n\n\n","category":"method"},{"location":"api/#CharDisplay.set_CGRAM_address-Tuple{CharDisplay.DisplayP, UInt8}","page":"API","title":"CharDisplay.set_CGRAM_address","text":"set_CGRAM_address(display::DisplayP, byte::UInt8)\n\nSets CGRAM address. CGRAM data is sent and received after this setting\n\n0 1 ACG ACG ACG ACG ACG ACG\n\n\n\n\n\n","category":"method"},{"location":"api/#CharDisplay.set_DDRAM_address-Tuple{CharDisplay.DisplayP, UInt8}","page":"API","title":"CharDisplay.set_DDRAM_address","text":"set_DDRAM_address(display::DisplayP, byte::UInt8)\n\nSets DDRAM address. DDRAM data is sent and received after this setting.\n\n1 ADD ADD ADD ADD ADD ADD ADD\n\n\n\n\n\n","category":"method"},{"location":"api/#CharDisplay.set_cursor","page":"API","title":"CharDisplay.set_cursor","text":"set_cursor(display::DisplayP, col::Int = 0, row::Int = 0)\n\nSet cursor position. __\n\nArguments\n\ncol : number of position: integer from 0 to 15\nrow : number of string: integer 0 or 1\n\n\n\n\n\n","category":"function"},{"location":"#CharDisplay","page":"Home","title":"CharDisplay","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Raspberry Pi package for controlling 16x2 character display (1602 LCD) on HD44780U module written in Julia.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia must be installed on Raspberry Pi.  I have tested on v1.1.0 which can be installed with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"sudo apt update\nsudo apt install julia","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package can be installed from Julia environment with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add https://github.com/metelkin/CharDisplay.jl.git","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"# setting connected pins\nd = DisplayP4(\n    2, # RS\n    3, # RW\n    4, # E\n    5, # D7\n    6, # D6\n    7, # D5\n    8  # D4\n)\n\nwrite(d, \"Julia +\")\nset_cursor(d, 0, 1) # move cursor to the second line\nwrite(d, \"Raspberry Pi\")","category":"page"},{"location":"#Circuits","page":"Home","title":"Circuits","text":"","category":"section"},{"location":"#A.-Connection-for-4-bit-mode","page":"Home","title":"A. Connection for 4 bit mode","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Display pins can be connected to any RaspberryPi GPIOs. For example this scheme is based on the following connections:","category":"page"},{"location":"","page":"Home","title":"Home","text":"VSS => GND (chip ground)\nVDD => +5V (chip power)\nV0 => central terminal of the potentiometer to get 0..+5V\nRS => GPIO2\nRW => GPIO3\nE => GPIO4\nD7-D4 => GPIO5-GPIO8\nA, R (light power) can be connected to 3.3V or 5V bus","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: scheme-a)","category":"page"},{"location":"#B.-Connection-for-8-bit-mode","page":"Home","title":"B. Connection for 8 bit mode","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Display pins can be connected to any RaspberryPi GPIOs. For example this scheme is based on the following connections:","category":"page"},{"location":"","page":"Home","title":"Home","text":"VSS => GND (chip ground)\nVDD => +5V (chip power)\nV0 => central terminal of the potentiometer\nRS => GPIO2\nRW => GPIO3\nE => GPIO4\nD7-D0 => GPIO5-GPIO12\nA, R (light power) can be connected to 3.3V or 5V bus","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: scheme-a)","category":"page"},{"location":"#Known-issues-and-limitations","page":"Home","title":"Known issues and limitations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Currently only parallel 8bit/4bit mode (without display driver) is supported.\nThe maximal rate (333 Byte/s) is limited by too long pauses between switching pins.   The package uses sleep(time) function where time cannot be less than 1e-3 (second).   The theoretical rate can be 25000 Byte/s and it needs another approach without sleep function.\nThe package works only in writing mode. Reading mode and checking BF (busy flag) signal is not supported.","category":"page"},{"location":"#Related-projects","page":"Home","title":"Related projects","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For more information read datasheet to the module\nhttps://www.mbtechworks.com/projects/drive-an-lcd-16x2-display-with-raspberry-pi.html\n","category":"page"}]
}
